{{
let ast = require("./grammerAST");
}}

start
	= mathSeq

mathSeq
	= opt_ws exp:expression tail:(opt_ws @mathOp opt_ws @expression)* opt_ws {
		if(tail.length == 0){
			return exp;
		} else {
			let tailMapper = (arr) => {
				let op = arr[0];
				let tailExp = arr[1];
				return new ast.MathOp(op, tailExp);
			}
			let mappedTail = tail.map(tailMapper);
			let mathOpList = new ast.MathOpList(mappedTail);
			let mathSeq = new ast.MathSeq(exp, mathOpList);
			return mathSeq;
		}
	}

mathOp
	= "*"
	/ "/"
	/ "+"
	/ "-"

expression
	= diceroll
	/ parenExpress
	/ intVal

diceroll
	= x:intVal? [dD] min:intVal ".." max:intVal mods:rollModifiers? {

		return new ast.DiceRoll(x ?? undefined, min, max, mods ?? undefined);
	}
	/ x:intVal? [dD] max:intVal mods:rollModifiers? {
		return new ast.DiceRoll(x ?? undefined, undefined, max, mods ?? undefined);
	}
	/ x:intVal? [wW] min:intVal ".." max:intVal mods:rollModifiers? {
		let wildMod = new ast.Explode("=", max, 10000, min, max);
		mods.unshift(wildMod);
		return new ast.DiceRoll(x ?? undefined, min, max, mods);
	}
	/ x:intVal? [wW] max:intVal maybeMods:rollModifiers? {
		let mods = maybeMods ?? [];
		let wildMod = new ast.Explode("=", max, 10000, 1, max);
		mods.unshift(wildMod);
		return new ast.DiceRoll(x ?? undefined, undefined, max, mods);
	}
	/ min:intVal ".." max:intVal rollModifiers? {
		return new ast.DiceRoll(undefined, min, max, []);
	}

rollModifiers
	= s:simpleModifiers {
		return new ast.RollSetModifiers([s]);
	}
	/ fullModifiers

simpleModifiers
	= ":" kd:[kKdD] maybe_hl:[hHlL]? maybe_howMany:intVal? {
		let defaultDiceType = "highest";
		let action = "keep";
		if(kd.toLower() === "d"){
			action = "drop"
			defaultDicetype = "lowest"
		}
		let diceType = defaultDiceType;
		if(maybe_hl){
			if(maybe_hl.toLower() === "l"){
				diceType = "lowest";
			} else {
				diceType = "highest";
			}
		}
		let howMany = maybe_howMany ?? undefined;
		return new ast.KeepDrop(action, diceType, howMany);
	}
	/ ":" dt:[hHlL] maybe_howMany:intVal? {
		let action = "keep";
		let diceType = "highest";
		if(dt.toLower() === "h"){
			action = "keep";
			diceType = "highest";
		} else {
			action = "drop";
			diceType = "lowest"
		}
		let howMany = maybe_howMany ?? undefined;
		return new ast.KeepDrop(action, diceType, howMany);
	}
	/ ":rr" maybe_limit:intVal? {
		let limit = maybe_limit ?? undefined;
		return new ast.Reroll("=", undefined, undefined);
	}

fullModifiers
	= opt_ws "{" opt_ws seq:modifierSeq opt_ws "}"{
		return seq;
	}

modifierSeq
	= head:modifier tail:( opt_ws ";" opt_ws @modifier )*{
		tail.unshift(head);
		return new ast.RollSetModifiers(tail);
	}

modifier
	= keepDropModifier
	/ explodeModifier
	/ rerollModifier

keepDropModifier
	= action:("keep" / "drop") dt:(need_ws "highest" / need_ws "lowest") maybe_howMany:(need_ws intVal)?{
		let howMany = maybe_howMany ?? undefined;
		return new ast.KeepDrop(action, dt, howMany);
	}

explodeModifier
	= "explode" maybe_compare:(need_ws @comparison opt_ws @intVal)? maybe_limit:(need_ws @intVal "x")? {
		maybeCompare = maybeCompare ?? [undefined, undefined];
		let compareStr = maybeCompare[0] ?? undefined;
		let compareVal = maybeCompare[1] ?? undefined;
		return ast.Explode(compareStr, compareVal, maybe_limit ?? undefined);
	}

rerollModifier
	= "reroll" opt_ws compareStr:comparison opt_ws compareVal:intVal need_ws limit:intVal "x" {
		return ast.Reroll(compareStr, compareVal, limit);
	}
	/ "reroll" need_ws compareVal:intVal need_ws limit:intVal "x" {
		return ast.Reroll(undefined, compareVal, limit);
	}
	/ "reroll" opt_ws compareStr:comparison opt_ws compareVal:intVal {
		return ast.Reroll(compareStr, compareVal);
	}
	/ "reroll" need_ws limit:intVal "x" {
		return ast.Reroll(undefined, undefined, limit);
	}
	/ "reroll" need_ws compareVal:intVal {
		return ast.Reroll(undefined, compareVal);
	}
	/ "reroll" {
		return ast.Reroll();
	}

comparison "comparison operator"
	= ">="
	/ "<="
	/ "!="
	/ [>=<]

parenExpress
	= maybe_rounder:roundIndicator? p:rawParens {
		if(maybe_rounder){
			return new ast.Rounder(maybe_rounder, p);
		} else {
			return p;
		}
	}

rawParens
	= "(" opt_ws e:mathSeq opt_ws ")"{
		return new ast.Parens(e);
	}

intVal "integer or rounded expression"
	= maybe_r:roundIndicator? lookup:variable {
		let baseAst = new ast.Lookup(lookup);
		if(maybe_r){
			return new ast.Rounder(maybe_r, baseAst);
		} else {
			return baseAst;
		}
	}
	/ r:roundIndicator p:rawParens {
		return new ast.Rounder(r, p);
	}
	/ i:intLiteral {
		return new ast.Static(i);
	}

roundIndicator
	= [cCfFrR]

variable
	= "[" name:[^\[\]]+ "]"{
		return name.join('');
	}

intLiteral
	=  [-]? [0-9]+ {
		return parseInt(text());
	}

opt_ws "whitespace"
	= [\n\r\t ]*

need_ws "required whitespace"
	= [\n\r\t ]+
