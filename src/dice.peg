start
  = dicerolls

dicerolls
	= v1:multiplicationSeq op:additionOp v2:additionSeq { return {'op':op, args: [v1, v2] }; }
	/ out:additionSeq { return out; }
	/ out:parenExpress { return out; }

parenExpress
  = "(" ws rolls:dicerolls ws ")" { return {'op':'paren_express', args: [rolls]} }

multiplicationOp
  = ws "*" ws { return '*'; }
	/ ws "/" ws { return '/'; }

multiplicationSeq
  = v1:diceroll op:multiplicationOp v2:multiplicationSeq { return {'op':op, args:[v1, v2] }; }
	/ v1:parenExpress op:multiplicationOp v2:multiplicationSeq { return {'op':op, args:[v1, v2] }; }
	/ d:diceroll { return d; }
	/ paren:parenExpress { return paren; }

additionSeq
	= v1:multiplicationSeq op:additionOp v2:additionSeq { return {'op':op, args:[v1, v2]}; }
	/ op:multiplicationSeq { return op; }
	/ op:parenExpress { return op; }

additionOp
  = ws "+" ws { return "+"; }
	/ ws "-" ws { return "-"; }

diceroll
  = x:intval mode:rollmode mm:maybe_minmax { return {'op':mode, 'args':[x, mm]} }
  / mode:rollmode mm:maybe_minmax { return {'op':mode, 'args':[{'op':'static', 'value':1}, mm]}; }
  / mm:minmax { return { 'op':'d', 'args':[ {'op':'static', 'value':1}, mm]}; }
  / x:intval { return x; }

rollmode
  = "d"
  / "w"

maybe_minmax
  = mm:minmax { return mm; }
  / max:intval { return {'op':'random', 'args':[{'op':'static', 'args':[], 'value':1}, max]}; }

minmax
  = min:intval ".." max:intval { return {'op':'random', 'args':[min, max]}; }

ws
  = [ ]*

intval
  = i:integer {
		return {'op': 'static', value: i};
	}
  / l:lookup{
		return l;
	}
	/ f:mathit v:lookup{
		return {'op':f, args:[v]};
	}
	/ f:mathit ex:parenExpress{
    return {'op':f, args:ex.args};
	}

mathit
  = "f" { return 'floor'; }
	/ "r" { return 'round'; }
	/ "c" { return 'ceil'; }

lookup
  = v:variable { return {'op':'lookup', 'value':v}; }

variable
  = "[" varname:[^[\]]+ "]" { return varname.join(""); }

integer "integer"
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }
	/ "-" digits:[0-9]+ { return parseInt(digits.join(""), 10) * -1; }
