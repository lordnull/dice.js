dice = {
	version: "0.7.0",

	roll: function(str, scope){
		var parsed = dice.parse.parse(str);
		var evaled = dice.eval.eval(parsed, scope);
		return evaled;
	},

	stringify_expression: function(evaled_op){
		var sub = dice.stringify(evaled_op.expression);
		var prefix = evaled_op.op[0];
		if(prefix === 'p'){
			prefix = '';
		}
		
		return prefix + "( " + sub + " )";
	},

	stringify_op: function(evaled_op){
		var rs = dice.stringify(evaled_op.rightSide);
		var ls = dice.stringify(evaled_op.leftSide);
		return rs + ' ' + evaled_op.op + ' ' + ls;
	},

	stringify_rolls: function(evaled_roll){
		var minStr = evaled_roll.min > 1 ? evaled_roll.min + '..' : '';
		var preamble = evaled_roll.x + evaled_roll.mode + minStr + evaled_roll.max + ':[';
		return preamble + evaled_roll.rolls.join(', ') + ']';
	},

	stringify: function(evaled){
		if(evaled.expression){
			return dice.stringify_expression(evaled);
		}

		if(evaled.op){
			return dice.stringify_op(evaled);
		}

		if(evaled.rolls){
			return dice.stringify_rolls(evaled);
		}

		return evaled.toString();
	}

};
dice.parse = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = function(v1, op, v2) { return {'op':op, args: [v1, v2] }; },
        peg$c2 = function(out) { return out; },
        peg$c3 = "(",
        peg$c4 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c5 = ")",
        peg$c6 = { type: "literal", value: ")", description: "\")\"" },
        peg$c7 = function(rolls) { return {'op':'paren_express', args: [rolls]} },
        peg$c8 = "*",
        peg$c9 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c10 = function() { return '*'; },
        peg$c11 = "/",
        peg$c12 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c13 = function() { return '/'; },
        peg$c14 = function(v1, op, v2) { return {'op':op, args:[v1, v2] }; },
        peg$c15 = function(d) { return d; },
        peg$c16 = function(paren) { return paren; },
        peg$c17 = function(v1, op, v2) { return {'op':op, args:[v1, v2]}; },
        peg$c18 = function(op) { return op; },
        peg$c19 = "+",
        peg$c20 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c21 = function() { return "+"; },
        peg$c22 = "-",
        peg$c23 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c24 = function() { return "-"; },
        peg$c25 = function(x, mode, mm) { return {'op':mode, 'args':[x, mm]} },
        peg$c26 = function(mode, mm) { return {'op':mode, 'args':[{'op':'static', 'value':1}, mm]}; },
        peg$c27 = function(mm) { return { 'op':'d', 'args':[ {'op':'static', 'value':1}, mm]}; },
        peg$c28 = function(x) { return x; },
        peg$c29 = "d",
        peg$c30 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c31 = "w",
        peg$c32 = { type: "literal", value: "w", description: "\"w\"" },
        peg$c33 = function(mm) { return mm; },
        peg$c34 = function(max) { return {'op':'random', 'args':[{'op':'static', 'args':[], 'value':1}, max]}; },
        peg$c35 = "..",
        peg$c36 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c37 = function(min, max) { return {'op':'random', 'args':[min, max]}; },
        peg$c38 = [],
        peg$c39 = /^[ ]/,
        peg$c40 = { type: "class", value: "[ ]", description: "[ ]" },
        peg$c41 = function(i) {
        		return {'op': 'static', value: i};
        	},
        peg$c42 = function(l) {
        		return l;
        	},
        peg$c43 = function(f, v) {
        		return {'op':f, args:[v]};
        	},
        peg$c44 = function(f, ex) {
            return {'op':f, args:ex.args};
        	},
        peg$c45 = "f",
        peg$c46 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c47 = function() { return 'floor'; },
        peg$c48 = "r",
        peg$c49 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c50 = function() { return 'round'; },
        peg$c51 = "c",
        peg$c52 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c53 = function() { return 'ceil'; },
        peg$c54 = function(v) { return {'op':'lookup', 'value':v}; },
        peg$c55 = "[",
        peg$c56 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c57 = /^[a-zA-Z 0-9]/,
        peg$c58 = { type: "class", value: "[a-zA-Z 0-9]", description: "[a-zA-Z 0-9]" },
        peg$c59 = "]",
        peg$c60 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c61 = function(varname) { return varname.join(""); },
        peg$c62 = { type: "other", description: "integer" },
        peg$c63 = /^[0-9]/,
        peg$c64 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c65 = function(digits) { return parseInt(digits.join(""), 10); },
        peg$c66 = function(digits) { return parseInt(digits.join(""), 10) * -1; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsedicerolls();

      return s0;
    }

    function peg$parsedicerolls() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicationSeq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseadditionOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseadditionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c1(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseadditionSeq();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c2(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseparenExpress();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseparenExpress() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c3;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedicerolls();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c5;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c7(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsemultiplicationOp() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c10();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c11;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c13();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsemultiplicationSeq() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsediceroll();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemultiplicationOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemultiplicationSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c14(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseparenExpress();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemultiplicationOp();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsemultiplicationSeq();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c14(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsediceroll();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c15(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseparenExpress();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c16(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseadditionSeq() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicationSeq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseadditionOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseadditionSeq();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c17(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemultiplicationSeq();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c18(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseparenExpress();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c18(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseadditionOp() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c21();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c22;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c24();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parsediceroll() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseintval();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserollmode();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemaybe_minmax();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c25(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parserollmode();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemaybe_minmax();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c26(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseminmax();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c27(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseintval();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c28(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parserollmode() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 100) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 119) {
          s0 = peg$c31;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
      }

      return s0;
    }

    function peg$parsemaybe_minmax() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseminmax();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c33(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseintval();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c34(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseminmax() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseintval();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c35) {
          s2 = peg$c35;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseintval();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c37(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      s0 = [];
      if (peg$c39.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c39.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
      }

      return s0;
    }

    function peg$parseintval() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c41(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselookup();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c42(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsemathit();
          if (s1 !== peg$FAILED) {
            s2 = peg$parselookup();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c43(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemathit();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseparenExpress();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c44(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemathit() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 102) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c46); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c47();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 114) {
          s1 = peg$c48;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c49); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c50();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 99) {
            s1 = peg$c51;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c52); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c53();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parselookup() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c54(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c55;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c57.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c57.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c58); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c59;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c61(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c63.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c63.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c65(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c22;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c63.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c63.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c66(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
dice.eval = (function(){

	function makeSeq(endIndex){
		var seq = [];
		seq[endIndex] = true;
		for(var i = 0; i < seq.length; i++){
			seq[i] = true;
		}
		return seq;
	};

	var ops = {

		'static': function(){
			var outValue = this.value;
			return function(){
				return outValue;
			};
		},

		'lookup': function(){
			var variableName = this.value;
			return function(scope){
				return scope[variableName];
			}
		},

		'floor': function(value){
			return function(scope){
				var floorable = value(scope);
				var tots = new Number(Math.floor(floorable));
				tots.op = 'floor';
				tots.expression = floorable;
				return tots;
			}
		},

		'ceil': function(value){
			return function(scope){
				var ceilable = value(scope);
				var tots = new Number(Math.ceil(ceilable));
				tots.op = 'ceil';
				tots.expression = ceilable;
				return tots;
			}
		},

		'round': function(value){
			return function(scope){
				var roundable = value(scope);
				var tots = new Number(Math.round(roundable));
				tots.op = 'round';
				tots.expression = roundable;
				return tots;
			}
		},

		'd': function(numRolls, minMax){
			return function(scope){
				var x = numRolls(scope);
				var seq = makeSeq(x - 1);
				var outMin, outMax;
				var rolled = seq.map(function(){
					var rolledRet = minMax(scope);
					outMin = rolledRet.min;
					outMax = rolledRet.max;
					return rolledRet;
				});
				var out = rolled.reduce(function(sum, val){
					return sum + val;
				}, 0);
				out = new Number(out);
				out.rolls = rolled;
				out.min = outMin;
				out.max = outMax;
				out.x = x;
				out.mode = 'd';
				return out;
			};
		},

		'w': function(numRolls, minMax){
			return function(scope){
				var x = numRolls(scope);
				var seq = makeSeq(x - 1);
				var outMin, outMax;
				var rolled = seq.map(function(){
					var lastRolled = minMax(scope);
					var wildrolled = 0;
					outMin = minMax.min;
					outMax = minMax.max;
					if(minMax.min === minMax.max){
						return lastRolled;
					}
					while(lastRolled === minMax.max){
						wildrolled += lastRolled;
						lastRolled = mimMax(scope);
					}
					return wildrolled;
				});
				var out = rolled.reduce(function(sum, val){
					return sum + val;
				}, 0);
				out = new Number(out);
				out.rolls = rolled;
				out.min = outMin;
				out.max = outMax;
				out.x = x;
				out.mode = 'w';
				return out;
			};
		},

		'random': function(minFun, maxFun){
			return function(scope){
				var rawRandom = Math.random();
				var max = maxFun(scope);
				var min = minFun(scope);
				var diff = max - min;
				var rawRandom = diff * rawRandom;
				var rndNumber = Math.round(rawRandom + min);
				rndNumber = new Number(rndNumber);
				rndNumber.min = min;
				rndNumber.max = max;
				return rndNumber;
			};
		},

		'+': function(v1, v2){
			return function(scope){
				var rightSide = v1(scope);
				var leftSide = v2(scope);
				var sum = rightSide + leftSide;
				sum = new Number(sum);
				sum.op = '+';
				sum.rightSide = rightSide;
				sum.leftSide = leftSide;
				return sum;
			};
		},

		'-': function(v1, v2){
			return function(scope){
				var rightSide = v1(scope);
				var leftSide = v2(scope);
				var sum = rightSide - leftSide;
				sum = new Number(sum);
				sum.op = '-';
				sum.rightSide = rightSide;
				sum.leftSide = leftSide;
				return sum;
			};
		},

		'*': function(v1, v2){
			return function(scope){
				var rightSide = v1(scope);
				var leftSide = v2(scope);
				var tots = rightSide * leftSide;
				tots = new Number(tots);
				tots.op = '*';
				tots.rightSide = rightSide;
				tots.leftSide = leftSide;
				return tots;
			};
		},

		'/': function(v1, v2){
			return function(scope){
				var rightSide = v1(scope);
				var leftSide = v2(scope);
				var tots = rightSide / leftSide;
				tots = new Number(tots);
				tots.op = '/';
				tots.rightSide = rightSide;
				tots.leftSide = leftSide;
				return tots;
			};
		},

		'paren_express': function(op){
			return function(scope){
				var tots = op(scope);
				outtots = new Number(tots);
				outtots.op = 'paren_express';
				outtots.expression = tots;
				return outtots;
			};
		}

	};

	function resolve_ops(args){
		args = args || [];
		return args.map(resolve_op);
	};

	function resolve_op(opObj){
		var subArgs = resolve_ops(opObj.args);
		return ops[opObj.op].apply(opObj, subArgs);
	};

	var result = {

		eval: function(parsed, scope){
			scope = scope || {};
			var ops = resolve_op(parsed)
			return ops(scope);

			/*var acc = {sum: 0, mode: "+", rolls: [], 'scope':scope}
			var reduced = parsed.reduce(reduceThemBones, acc);
			return {sum: reduced.sum, rolls: reduced.rolls};*/
		},

		'ops':ops
	}

	return result;

})();
